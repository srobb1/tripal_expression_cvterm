<?php

//test
/**
 * @file
 * Installation of the example module
 */

/**
 * Implements hook_disable().
 *
 * Perform actions when the module is disabled by the site administrator
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_disable() {

  // EXPLANATION: If you are using Drupal Views you want to ensure that any
  // default views that your module provides are disabled when the module is
  // disabled. Default views are specified in the
  // [module name].views.default.inc file. The following code will disable these
  // views. If your module does not create any default views you can remove the
  // following code.

  // Disable all default views provided by this module
  /*
  require_once("tripal_expression_cvterm.views_default.inc");
  $views = tripal_expression_cvterm_views_default_views();
  foreach (array_keys($views) as $view_name) {
    tripal_disable_view($view_name,FALSE,array('suppress_error' => TRUE));
  }
  */

}

/**
 * Implements hook_requirements().
 *
 * Performs check to see if all required dependencies are met. Drupal will
 * automatically check for module dependencies but here you can check for other
 * requirements.
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_requirements($phase) {
  $requirements = array();
  
  /*
  if ($phase == 'install') {
    // EXPLANATION: It is essential that Chado be installed for almost all
    // Tripal modules. Therefore, the following code checks to ensure Chado is
    // installed and available. If your module does not require that Chado be
    // installed, you can remove the following check.

    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_expression_cvterm'] = array(
          'title' => "tripal_expression_cvterm",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  */
  
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Performs actions when the modules is first installed.
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_install() {

  // EXPLANATION: Here is a good place to add any materialized views, controlled
  // vocabularies CV, databases or CV terms needed by your module.
  // To keep this module code short, create functions to do each of those tasks

  // add any materialized view
  tripal_expression_cvterm_organism_add_mviews();

}


/**
 * Implements hook_uninstall().
 *
 * Performs actions when the modules is uninstalled.
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_uninstall() {

}

/**
 * Implementation of hook_schema().
 *
 * Provides a list of tables to be created inside of the Drupal schema (the
 * 'public' schema by default). It uses the Drupal Schema API array structure to
 * define the table, its indexes and constraints.
 *
 * Schema API documentation is here:
 * https://api.drupal.org/api/drupal/includes%21database%21schema.inc/group/schemaapi/7
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_schema() {

  // EXPLANATION: If your module creates a node type for data in the Chado
  // database then you probably need to link Drupal nodes with a respective ID
  // in the Chado table. The following is an example array for a table that will
  // link the 'chado_example' node type (created by this example module) with a
  // record in the fake Chado example table. This table will link the 'nid' of
  // the node with the 'example_id' of the example record.
  $schema['chado_expression_cvterm_organism'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
       ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
       ),
      'expression_cvterm_organism_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'sync_date' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'UNIX integer sync date/time'
      ),
    ),
    'indexes' => array(
      'chado_expression_cvterm_idx1' => array('expression_cvterm_organism_id')
    ),
    'unique keys' => array(
      'chado_expression_cvterm_uq1' => array('nid', 'vid'),
      'chado_expression_cvterm_uq2' => array('vid'),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
};


/**
 * Add custom tables to Chado that are required by this module
 *
 * @ingroup tripal_example
 */
function tripal_expression_cvterm_organism_add_custom_tables() {

  // EXPLANATION: for this example module we will create a set of example tables
  // that mimic Chado tables. These tables are:
  //
  //   1) example     (for storing the primary example records)
  //   2) exampleprop (for sorting properties about the example)
  //   3) example_relationship (for storing relationships about examples)
  //   4) example_dbxref (for storing cross-references about an example)
  //
  // To make the code easier to read, each table is created by a separate
  // function called here:

  tripal_expression_cvterm_organism_add_expression_cvterm_organism_table();
}


/**
 * Adds the 'example' custom table to Chado.
 *
 * @ingroup tripal_example
 */
function tripal_expression_cvterm_organism_add_expression_cvterm_organism_table() {
  // EXPLANATION: use the Drupal Schema API to describe the custom table. Then
  // add the table using the chado_create_custom_table() function.
  $schema = array(
    'table' => 'expression_cvterm_organism',
    'fields' => array(
      'expression_cvterm_organism_id' => array(
        'type' => 'serial',
        'not null' => true,
      ),
      'cvterm_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
      'organism_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
      'cv_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
    ),
    'primary key' => array(
      0 => 'expression_cvterm_organism_id',
    ),
    'unique keys' => array(
      'expression_cvterm_organism_uq1' => array(
        0 => 'cv_id',
        1 => 'cvterm_id',
        2 => 'organism_id',
      ),
    ),
    'indexes' => array(
      'expression_cvterm_organism_idx1' => array(
        0 => 'expression_cvterm_organism_id',
      ),
    ),
    'foreign keys' => array(
      'cvterm' => array(
        'table' => 'cvterm',
        'columns' => array(
          'cvterm_id' => 'cvterm_id',
        ),
      ),
      'organism' => array(
        'table' => 'organism',
        'columns' => array(
          'organism_id' => 'organism_id',
        ),
      ),
      'cv' => array(
        'table' => 'cv',
        'columns' => array(
          'cv_id' => 'cv_id',
        ),
      ),
    ),
    // EXPLANATION: the 'referring_tables' array is the list of tables that have
    // a foreign key relationships with this table. This information is required
    // for the Tripal API to be able to expand tables in templates.
  );
  chado_create_custom_table('expression_cvterm_organism', $schema, TRUE);
}

/**
 * Creates a materialized view that stores the type & number of examples per
 * organism.
 *
 * @ingroup tripal_expression_cvterm
 */
function tripal_expression_cvterm_organism_add_mviews() {

  // EXPLANATION: use the tripal_add_mview() function to add a materialized view
  // needed by your module. If you have more than one materialized view it is
  // best to create a single function for each one and call each function here.
  // Otherwise this function can become quite long.

}
