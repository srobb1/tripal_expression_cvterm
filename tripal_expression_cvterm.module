<?php

function tripal_expression_cvterm_permission() {

  // EXPLANATION:  here we want to setup any of the permission types that this
  // module needs. Our example module creates a new chado node type called
  // 'chado_example'. Therefore, we need permissions to view, edit, delete,
  // create our new node type. Additionally, we want to add a permission that
  // allows for administration of this module. These permissions will appear in
  // the 'People' -> 'Permissions' configuration page and allow the site admin
  // to specify which user roles are allowed to perform specific actions.
  return array(
    'access chado_expression_cvterm content' => array(
      'title' => t('View Examples'),
      'description' => t('Allow users to view example pages.'),
    ),
    'create chado_expression_cvterm content' => array(
      'title' => t('Create Examples'),
      'description' => t('Allow users to create new example pages.'),
    ),
    'delete chado_expression_cvterm content' => array(
      'title' => t('Delete Examples'),
      'description' => t('Allow users to delete example pages.'),
    ),
    'edit chado_expression_cvterm content' => array(
      'title' => t('Edit Examples'),
      'description' => t('Allow users to edit example pages.'),
    ),
    'administer chado_expression_cvterm module' => array(
      'title' => t('Administer Chado Expression Cvterms'),
      'description' => t('Allow users to administer all examples.'),
    ),
  );
}


function tripal_expression_cvterm_menu() {
  $items = array();
   
  //  the machine name of your module
  $module_name = 'tripal_expression_cvterm';

  // the base specified in hook_node_info
  $node_type = 'chado_expression_cvterm';

  $items['admin/tripal/extension/tripal_expression_cvterm'] = array(
    'title' => 'tripal_expression_cvterm',
    'description' => 'Example module for help with development of new extension modules.',
    'page callback' => 'tripal_expression_cvterm_admin_examples_listing',
    'access arguments' => array('administer tripal example'),
    'type' => MENU_NORMAL_ITEM,
    // We include the file where the 'page callback' function
    // is located.  This removes the need to include all of the
    // include files at the top of the module, and speeds
    // module loading time.
    'file' => '/includes/tripal_expression_cvterm.admin.inc',
  );


   // This menu item will be a tab on the admin/tripal/chado/tripal_example page
   // that is not selected by default
   $items['admin/tripal/extension/tripal_expression_cvterm/sync'] = array(
     'title' => ' Sync',
     'description' => 'Sync Cvterms that are associated with Expression Images and Features from Chado with Drupal',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('chado_node_sync_form', $module_name, $node_type),
     'access arguments' => array('administer tripal examples'),
     'type' => MENU_LOCAL_TASK,
     'weight' => 0
   );

   return $items;
 }

 function tripal_expression_cvterm_node_info() {
   return array(
     'chado_expression_cvterm' => array(
       'name' => t('example'),
       'base' => 'chado_expression_cvterm',
       'description' => t('A Chado expression cvterm is a cvterm that has been associated with a expression image and feature.'),
       'has_title' => TRUE,
       'locked' => TRUE,

       // this is what differs from the regular Drupal-documented hook_node_info()
       'chado_node_api' => array(
         'base_table' => 'expression_cvterm',            // The name of the chado base table
         'hook_prefix' => 'chado_expression_cvterm',     // Usually the name of the node type
         'linking_table' => 'chado_expression_cvterm',   // Specifies the linking table used
                                               // to map records to Drupal nodes.
                                               // if 'linking_table' is not specified
                                               // it defaults to the node_type name.
         'record_type_title' => array(
           'singular' => t('Cvterm'),         // Singular human-readable title
           'plural' => t('Cvterms')           // Plural human-readable title
         ),
         'sync_filters' => array( // filters for syncing
           'type_id'     => TRUE,     // TRUE if there is an example.type_id field
           'organism_id' => TRUE,     // TRUE if there is an example.organism_id field
           //'checkboxes'  => array('name')  // If the 'checkboxes' key is present then the
                                           // value must be an array of column names in
                                           // base table. The values from these columns will
                                           // be retreived, contentated with a space delimeter
                                           // and provided in a list of checkboxes
                                           // for the user to choose which to sync.
         ),
       )
     ),
   );
 }



function chado_expression_cvterm_chado_node_sync_form($form, &$form_state) {

 if (isset($form_state['build_info']['args'][0])) {
    $module = $form_state['build_info']['args'][0];
    $node_type = $form_state['build_info']['args'][1];
    $node_info = call_user_func($module . '_node_info');

    // If a linking table is set in the node_info array then use that,
    // otherwise ues the node_type as the linking table.
    if (array_key_exists('linking_table', $node_info[$node_type]['chado_node_api'])) {
      $linking_table = $node_info[$node_type]['chado_node_api']['linking_table'];
    }
    else {
      $linking_table = 'chado_' . $node_info[$node_type]['chado_node_api']['base_table'];
    }
    $args = $node_info[$node_type]['chado_node_api'];
    $form_state['chado_node_api'] = $args;
  }


  // get the list of CV Libraries
  if ($args['sync_filters']['type_id']) {
    $sql = "SELECT distinct cv.cv_id , cv.name
         FROM {cv} cv , {expression_cvterm} ec , {cvterm} cvt
         WHERE ec.cvterm_id = cvt.cvterm_id
          AND cvt.cv_id = cv.cv_id
          ORDER BY cv.name";
    $results = chado_query($sql);
    $libraries[] = '';
    foreach ($results as $library) {
      $libraries[$library->cv_id] = $library->name;
    }
    $form['sync']['type_ids'] = array(
      '#title' => t('CV Library'),
      '#type' => t('select'),
      '#description' => t("Choose the CV Library for which %title_plural types set above will be synced.",
      array(
        '%title_singular' => $args['record_type_title']['singular'],
        '%title_plural' => $args['record_type_title']['plural']
      )),
      '#options' => $libraries,
      '#default_value' => (isset($form_state['values']['type_id'])) ? $form_state['values']['type_id'] : 0,
    );
  }
  // get the list of CV Libraries


  // get the list of organisms
  if ($args['sync_filters']['organism_id']) {
    $sql = "SELECT distinct o.organism_id, genus, species, common_name
        FROM {feature_expression} fe , {feature} f , {organism} o
        WHERE fe.feature_id = f.feature_id
          AND f.organism_id = o.organism_id ORDER BY genus, species";
    $results = chado_query($sql);
    $organisms[] = '';
    foreach ($results as $organism) {
      $organisms[$organism->organism_id] = "$organism->genus $organism->species ($organism->common_name)";
    }
    $form['sync']['organism_id'] = array(
      '#title' => t('Organism'),
      '#type' => t('select'),
      '#description' => t("Choose the organism for which %title_plural types set above will be synced.", 
      array(
        '%title_singular' => $args['record_type_title']['singular'],
        '%title_plural' => $args['record_type_title']['plural']
      )),
      '#options' => $organisms,
      '#default_value' => (isset($form_state['values']['organism_id'])) ? $form_state['values']['organism_id'] : 0,
    );
  }
  // get the list of organisms

  return $form;
}
function chado_expression_cvterm_chado_node_sync_create_new_node($new_node, $record) {

  // Add relevant chado details to the new node object. This really only
  // needs to be the fields from the node used during node creation
  // including values used to generate the title, etc. All additional chado
  // data will be added via nodetype_load when the node is later used
  $new_node->title = "$record->genus $record->species ($record->common_name): $record->cvtname";
  $new_node->description = $record->definition;
  $new_node->cv_id = $record->cvterm_type_id;

  return $new_node;
}
function chado_expression_cvterm_chado_node_sync_select_query($query) {
  // You can add fields to be selected. Be sure to prefix each field with the
  // tale name.
  $query['select'][] = 'cvterm.definition';


  // Provide any join you may need to the joins array. Be sure to wrap the
  // table name in curly brackets.
  $query['joins'] = array();
//  $query['joins'][] = ', {feature} feature';
//  $query['joins'][] = ', {feature_expression} feature_expression';
//  $query['joins'][] = ', {cvterm} cvterm';
//  $query['joins'][] = ', {organism} organism';

    $query['joins'][] = 'INNER JOIN {feature_expression} feature_expression ON expression_cvterm.expression_id = feature_expression.expression_id'; 
    $query['joins'][] = 'INNER JOIN {cvterm} cvterm ON expression_cvterm.cvterm_id = cvterm.cvterm_id';
    $query['joins'][] = 'INNER JOIN {feature} feature ON feature.feature_id = feature_expression.feature_id'; 
    $query['joins'][] = 'INNER JOIN {organism} organism ON feature.organism_id = organism.organism_id';
//    $query['joins'][] = 'INNER JOIN expression_cvterm ON expression_cvterm.cvterm_type_id = :cv_id'; 
  // base table: expression_cvterm already included

  $category = 'tripal_expression_cvterm';


  // where_args
  // set original type values as a new category
  // keep organism
  // remove key 'type' and 'id'
  foreach ($query['where_args']['type'] as $key => $value){
    $query['where_args'][$category][':cv_id'] = $value;
  }
  // organism where_arg already included
  unset($query['where_args']['type']);
  if (array_key_exists('id' , $query['where_args'])){
      unset($query['where_args']['id']);
  }

  // where clauses
  // remove key 'type' and 'id'
  unset($query['where_clauses']['type']);
  if (array_key_exists('id' , $query['where_clauses'])){
      unset($query['where_clauses']['id']);
  }

  // add more where_clauses
//   $query['where_clauses'][$category][] = 'feature.feature_id = feature_expression.feature_id';
//   $query['where_clauses'][$category][] = 'expression_cvterm.expression_id = feature_expression.expression_id';
//   $query['where_clauses'][$category][] = 'expression_cvterm.cvterm_id = cvterm.cvterm_id';
   $query['where_clauses'][$category][] = 'expression_cvterm.cvterm_type_id = :cv_id';
//   $query['where_clauses'][$category][] = 'feature.organism_id = organism.organism_id';
   // organism where clause already included
 
  // Must return the updated query
  return $query;
}
